" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
"" set scrolloff=5

" Do incremental searching.
"" set incsearch

" Don't use Ex mode, use Q for formatting.
"" map Q gq

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
"" Plug 'machakann/vim-highlightedyank'
" Commentary plugin
"" Plug 'tpope/vim-commentary'


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
" options and mappings that are supported by both Vim and IdeaVim

"" Customize settings

"" Display line number
set nu

"" Display relative line number
"" set relativenumber

"" Case-insensitive searching UNLESS \C or capital in search
:set ignorecase smartcase

set multicursor

:set hlsearch

let mapleader="\<Space>"

Plug 'preservim/nerdtree'
Plug 'tpope/vim-surround'

if has('ide')
  map <leader>e :NERDTreeFind<CR>

  map <C-s> <Action>(SaveAll)

  map <leader>bd <Action>(CloseEditor)

  map <leader>cd <Action>(ShowErrorDescription)

  map <leader>ff <Action>(SearchEverywhere)
  map <leader>fw <Action>(FindInPath)

  map <leader>/ <Action>(CommentByLineComment)

  map <C-l> <Action>(NextSplitter)
  map <C-h> <Action>(PrevSplitter)

  map <C-[> <Action>(Back)
  map <C-]> <Action>(Forward)

  map L <Action>(NextTab)
  map H <Action>(PreviousTab)

  map ]d <Action>(GotoNextError)
  map [d <Action>(GotoPreviousError)

  map <leader>db <Action>(ToggleLineBreakpoint)

  map <leader>\ <Action>(MoveTabRight)

  nnoremap d "_d
  vnoremap d "_d

  nmap <C-w><Down> <Action>(StretchSplitToBottom)
  nmap <C-w><Left> <Action>(StretchSplitToLeft)
  nmap <C-w><Right> <Action>(StretchSplitToRight)
  nmap <C-w><Up> <Action>(StretchSplitToTop)

  noremap <ESC> :nohlsearch<CR>
endif
